<#
.SYNOPSIS
Create three accounts (Victim, Helpdesk & Domain Admin) for the attack demo.

.DESCRIPTION

Based on the Tutorial: Setup a Microsoft Defender for Identity security alert lab


.NOTES

last update: 2022-01-06
File Name  : AS2Go-create-users.ps1
Author     : Holger Zimmermann | hozimmer@microsoft.com


.PARAMETER Shortname
Define the name for the accounts. "y" is the default.
Y - yyyyMMdd
N - yyyyMMdd.hhmmss
<your name> 

.PARAMETER DomainAdmin
Create an DA-xxxxx Domain Admin account. "y" is the default.

.PARAMETER HelpDesk
Create an HD-xxxxx HelpDesk account. "y" is the default.

.PARAMETER Victim
Create an VI-xxxxx Victim account. "y" is the default.

.EXAMPLE
PS> cd C:\Temp\AS2Go
PS> .\AS2GO-create-users.ps1

.EXAMPLE
PS> .\AS2GO-create-users.ps1 -Shortname n

.EXAMPLE
PS> .\AS2GO-create-users.ps1 -Shortname HerrHoZi


.EXAMPLE
PS> .\AS2GO-create-users.ps1 -DomainAdmin y -HelpDesk y -Victim n -Shortname AS2Go
creates the only the domain admin & help desk account with an dedicated name, da-AS2Go & hd-AS2Go



.LINK
https://docs.microsoft.com/en-us/defender-for-identity/playbook-setup-lab
https://docs.microsoft.com/en-us/defender-for-identity/cas-isp-riskiest-lmp
https://docs.microsoft.com/en-us/defender-for-identity/use-case-lateral-movement-path
https://docs.microsoft.com/en-us/powershell/scripting/developer/help/autogenerated-elements-of-comment-based-help?view=powershell-7.1

#>

#Check if the current Windows PowerShell session is running as Administrator. 
#If not Start Windows PowerShell by  using the Run as Administrator option, and then try running the script again.

#Requires -RunAsAdministrator

param([string] $DomainAdmin='y', [string] $HelpDesk='y', [string] $Victim='y', [string] $Shortname='y')

#get current Posh Name & path
$PoSHPath = Get-Location
$scriptName = $MyInvocation.MyCommand.Name
$logfile = "$PoSHPath\$scriptName.log"
$NTDSDITFILE = "$PoSHPath\ntds.dit"

# OU Path for new Users
$sPath = "OU=Users,OU=AS2Go,DC=sandbox,DC=corp"
$sUPNSuffix = "@HerrHozi.com"

# Store the user passwords as variables
$DASecurePass = ConvertTo-SecureString -String '1q2w3e$Rda' -AsPlainText -Force
$HDSecurePass = ConvertTo-SecureString -String '1q2w3e$Rhd' -AsPlainText -Force
$VISecurePass = ConvertTo-SecureString -String '1q2w3e$Rvi' -AsPlainText -Force

# Manager's must exist in the AD
$DAManager = "Holger"
$HDManager = "HoZi"
$VIManager = "Zimbo"

# User thumbnail Photo
$DAPhoto = "$PoSHPath\mdi-admin.jpg"
$HDPhoto = "$PoSHPath\mdi-helpdesk.jpg"
$VIPhoto = "$PoSHPath\mdi-victim.jpg"

# Active Directory Security Groups
$VIGroup = "SG-AS2Go-Victims"            # member of local admins on VICTIM PC
$HDGroup = "SG-AS2Go-HelpDesk"           # member of local admins on ADMIN PC & VICTIM PC
$DAGroup = "SG-AS2Go-Admins"             # member of local admins on ADMIN PC


#define the user first & last name
$sFirstName = Get-Date -Format HHmmss    # create the first name based on hours, minutes and sec
$sLastname  = Get-Date -Format yyyyMMdd  # create the last name based on year, month, days

#Account expires after xx Days
$TimeSpan = New-TimeSpan -Days 7 -Hours 0 -Minutes 0


Import-Module ActiveDirectory


Function NewMDIUser()

{

param([string] $sUserPrincipalName, [string] $sName, [string] $sSamaccountName,  [string] $sFirstName, [string] $sLastname, [string] $sDisplayName, [string] $sPath, [SecureString] $secure_string_pwd)


new-aduser -UserPrincipalName $sUserPrincipalName -Name $sName -SamAccountName $sSamaccountName -GivenName $sFirstName -Surname $sLastname -DisplayName $sDisplayName -PasswordNeverExpires $false -Path $sPath -AccountPassword $secure_string_pwd -PassThru | Enable-ADAccount

$sDepartment = "STU"
$sTitle = "SCI TS"
$sCompany = "M365 Defender (Germany)"
$sCity = "Cologne"
$sCountry = "DE"
$sCo = "Germany"
$scountryCode = 276
$dummy = $slastname.Substring(3, 5)
$sZipCode  = $dummy
$sInfoNote = "created via powershell script"
$sDescription ="MDI | MDE | AS2Go"
$dummy = $sfirstname.Substring(1,3)
$sMobile = ("+49 ($dummy) " + $slastname)
$dummy = $slastname.Substring(2, 3)
$sOfficePhone = ("+49 ($dummy) " + $sfirstname)
$sState = "NRW"
$sStreet = "Am Holzmarkt 2a"
$sOffice = "RO Köln"
$sEmployeeNumber = ($sLastname + $sFirstName)
$sEmployeeId = ($sLastname + $sFirstName)
$sHomePage =  "https://HerrHozi.com"

sleep -Milliseconds 2000


Set-ADUser -identity $sSamaccountName -State $sState -Office $sOffice  -StreetAddress $sStreet  -MobilePhone $sMobile -OfficePhone $sOfficePhone  -Department $sDepartment -Title $sTitle -Company $sCompany -City $sCity  -PostalCode $sZipCode -Country $sCountry -Description $sDescription -EmployeeID $sEmployeeID -EmployeeNumber $sEmployeeNumber -HomePage $sHomePage 
Set-ADUser –Identity $sSamaccountName –Replace @{countryCode=$scountryCode}
Set-ADUser –Identity $sSamaccountName –Replace @{co=$sCo}



Set-ADAccountExpiration –Identity $sSamaccountName -TimeSpan $TimeSpan


}



If ($Shortname -eq 'y')
{
   $sNewName = ($sLastname)
  
}
elseif ($Shortname -eq 'n')
{
   $sNewName = ($sLastname + "." + $sFirstName)
}
else
{
   $sNewName = $Shortname
}



$sNewUserPrincipalName = ($sNewName + $sUPNSuffix)
$sPhone = $sLastname
$sOffice = get-date -Format m
$sroom = $sFirstName

#clear-host

Write-Host "`nStart creating 3 users for usecase '$sNewName'. Accounts expire after $TimeSpan days`n" -ForegroundColo Yellow


if ($Victim -eq 'y')
  {
 # create Victim User (like Jeff Leatherman)
 # =========================================

  $sUserPrincipalName = "VI-" + $sNewUserPrincipalName
  $sName = $sNewName + "-VI"
  $sSamAccountName = "VI-" + $sNewName
  $sDisplayName = ("Compromised Credentials ($sSamAccountName)")
  $bthumbnailPhoto = $VIPhoto

  NewMDIUser -sUserPrincipalName $sUserPrincipalName -sName $sName -sSamaccountName $sSamAccountName -sFirstName $sFirstName -sLastname $sLastname -sDisplayName $sDisplayName -sPath $sPath -secure_string_pwd $VISecurePass
  $sName = $sSamAccountName

  Add-ADGroupMember -Identity $VIGroup -Members $sName
  Set-ADUser $sName -Replace @{thumbnailPhoto=([byte[]](Get-Content $bthumbnailPhoto -Encoding byte))} -Manager $VIManager -Initials "VI" -Title "Normal User" -Department "M365D"
  Write-Host "... created new user - $sName | Compromised User account (Victim)"
  }

  
if ($HelpDesk -eq 'y')
  {
  # create Helpdesk User (like Ron HelpDesk)
  # =========================================

$sUserPrincipalName = "HD-" + $sNewUserPrincipalName
$sName = $sNewName + "-HD"
$sSamAccountName = "HD-" + $sNewName
$sDisplayName = ("Helpdesk User ($sSamAccountName)")
$bthumbnailPhoto = $HDPhoto

NewMDIUser -sUserPrincipalName $sUserPrincipalName -sName $sName -sSamaccountName $sSamAccountName -sFirstName $sFirstName -sLastname $sLastname -sDisplayName $sDisplayName -sPath $sPath -secure_string_pwd $HDSecurePass
$sName = $sSamAccountName
Add-ADGroupMember -Identity $HDGroup  -Members $sName
Set-ADUser $sName -Replace @{thumbnailPhoto=([byte[]](Get-Content $bthumbnailPhoto -Encoding byte))} -Manager $HDManager -Initials "HD" -Title "Helpdesk" -Department "M365D" -PasswordNeverExpires $true
  Write-Host "... created new user - $sName | Helpdesk User"

  }

 
if ($DomainAdmin -eq 'y')
  {
  # create Domain Admin User (like Samira Abassi)
  # =============================================

$sUserPrincipalName = "DA-" + $sNewUserPrincipalName
$sName = $sNewName + "-DA"
$sSamAccountName = "DA-" + $sNewName
$sDisplayName = ("Domain Admin ($sSamAccountName)")
$bthumbnailPhoto = $DAPhoto

NewMDIUser -sUserPrincipalName $sUserPrincipalName -sName $sName -sSamaccountName $sSamAccountName -sFirstName $sFirstName -sLastname $sLastname -sDisplayName $sDisplayName -sPath $sPath -secure_string_pwd $DASecurePass

$sName = $sSamAccountName

Add-ADGroupMember -Identity "Domain Admins" -Members $sName
Add-ADGroupMember -Identity $DAGroup -Members $sName

Set-ADUser $sName -Replace @{thumbnailPhoto=([byte[]](Get-Content $bthumbnailPhoto -Encoding byte))} -Manager $DAManager -Initials "DA" -Title "Domain Admin" -Department "M365D"
Write-Host "... created new user - $sName | Domain Admin"

  }



# SUMMMARY
# ========

Write-Host "`n`nSUMMARY:" -ForegroundColor Green
Write-Host     "========" -ForegroundColor Green
Get-ADUser -LDAPFilter "(sAMAccountName=*$sNewName)" -Properties canonicalName, Created  | select sAMAccountName, Created, userPrincipalName, name, canonicalName | ft


$MyScript = $MyInvocation.MyCommand.Definition
$OnServer = " on server [" + [Environment]::machinename + "]" 
$byUser   = " by user [" + [Environment]::UserName + "]"
$UseCase  = " Usecase [" + $sNewName + "]"


Write-Host "`n`nReminder:" -ForegroundColor Yellow
Write-Host "If you changed the default password, do NOT forget to update the XML file!!!!!!!" -ForegroundColor Yellow

# update the log file
# ===================
" " | Out-File -FilePath $logfile -Append -Encoding default 
(Get-Date).ToString() + " last run: " + $MyScript + $onserver + $byUser + $UseCase  | Out-File -FilePath $logfile -Append -Encoding default 
Get-ADUser -LDAPFilter "(sAMAccountName=*$sNewName)" -Properties canonicalName, Created  | select sAMAccountName, Created, userPrincipalName, name, canonicalName | ft | Out-File -FilePath $logfile -Append -Encoding default


# update the dummy NTDS.DTI file
# ==============================
Get-ChildItem -Path c:\windows -Recurse | Out-File -FilePath $NTDSDITFILE -Append -Encoding default
